JS Code:

import { fetchInitialRecipes, addRecipe } from './utils.js';

const recipesContainer = document.getElementById('recipes');
const addRecipeButton = document.getElementById('addRecipeButton');

// Array to store new recipes
let newRecipes = [];

// Function to display recipes
function displayRecipes(recipes) {
  recipesContainer.innerHTML = '';
  recipes.forEach(recipe => {
    const recipeElement = document.createElement('div');
    recipeElement.innerHTML = `
      <h3>${recipe.name}</h3>
      <p>Ingredients: ${recipe.ingredients.join(', ')}</p>
      <p>Instructions: ${recipe.instructions}</p>
    `;
    recipesContainer.appendChild(recipeElement);
  });
}



// Function to add a new recipe
async function handleAddRecipe() {
  const name = prompt('Enter recipe name:');
  const ingredients = prompt('Enter ingredients (comma separated):').split(',');
  const instructions = prompt('Enter instructions:');
  
  try {
    const newRecipe = { name, ingredients, instructions };
    newRecipes.push(newRecipe);
    displayRecipes([...initialRecipes, ...newRecipes]);
  } catch (error) {
    console.error('Error adding recipe:', error);
  }
}

// Event listener for add recipe button
addRecipeButton.addEventListener('click', handleAddRecipe);

// Fetch initial recipes and display them initially
let initialRecipes = [];
async function init() {
  try {
    initialRecipes = await fetchInitialRecipes();
    displayRecipes(initialRecipes);
  } catch (error) {
    console.error('Error fetching recipes:', error);
  }
}

// Initialize the app
init();


utils.js Code

const apiUrl = 'https://www.thecocktaildb.com/api/json/v1/1';

// Function to fetch initial recipes
export function fetchInitialRecipes() {
  return new Promise((resolve, reject) => {
    fetch(`${apiUrl}/search.php?s=margarita`)
      .then((response) => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then((data) => {
        if (!data.drinks) {
          throw new Error('No recipes found');
        }
        resolve(
          data.drinks.slice(0, 3).map((drink) => ({
            name: drink.strDrink,
            ingredients: [
              drink.strIngredient1,
              drink.strIngredient2,
              drink.strIngredient3,
              // Add more ingredients as needed
            ].filter(Boolean), // Remove any empty values
            instructions: drink.strInstructions,
          }))
        );
      })
      .catch((error) => {
        reject(new Error('Error fetching recipes: ' + error));
      });
  });
}

// Function to add a new recipe
export async function addRecipe(recipe) {
  try {
    // Logic to add the recipe to your database/API would go here
    console.log('Adding recipe:', recipe);
    // For now, just returning the recipe as if it was added successfully
    return recipe;
  } catch (error) {
    throw new Error('Error adding recipe:', error);
  }
}

